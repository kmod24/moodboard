
* **React**

  * **What:** UI library for building components with state.
  * **How used:** `App.tsx` renders the form + dayboard, manages state with `useState`, triggers `fetch('/dayboard')`, and updates theme via CSS vars in `useEffect`.

* **Vite**

  * **What:** Frontend dev server + bundler.
  * **How used:** Runs the React app with HMR; **dev proxy** forwards `/dayboard` to `http://127.0.0.1:8000` (no CORS pain); builds optimized static files for prod.

* **TypeScript**

  * **What:** Typed JavaScript.
  * **How used:** Interfaces like `Dayboard` catch shape mistakes in API responses & component props; safer refactors.

* **CSS (global stylesheet)**

  * **What:** Styling system.
  * **How used:** Design tokens via `:root` CSS variables (e.g., `--accent`), reusable utility classes (`card`, `pill`, `grid`), responsive layout; React updates `--accent` per mood.

* **Fetch API (browser)**

  * **What:** HTTP client in the browser.
  * **How used:** `POST /dayboard` with `{mood_word}`; renders JSON response (songs, images, outfits, coffee).

* **FastAPI**

  * **What:** Python web framework for REST APIs.
  * **How used:** Defines `POST /dayboard` endpoint; parses JSON body, calls generator logic, returns JSON; can also **serve the built React app** via `StaticFiles`.

* **Uvicorn (ASGI server)**

  * **What:** Runs FastAPI app.
  * **How used:** `uvicorn simple_main:app --reload --port 8000` for local dev; hosts the API (and static files in prod setup).

* **Pydantic & pydantic-settings**

  * **What:** Data validation + config loader.
  * **How used:** Validates request/response models (earlier version), loads `.env` (`OPENAI_API_KEY`) into `settings`.

* **httpx (async HTTP client)**

  * **What:** Outbound HTTP from backend.
  * **How used:** (When AI enabled) calls OpenAI chat & image endpoints; includes retry/backoff; falls back gracefully on errors/quota.

* **CORS Middleware**

  * **What:** Cross-origin access control.
  * **How used:** Allows the frontend (Vite dev server) to call the FastAPI API during development.

* **OpenAPI/Swagger UI**

  * **What:** Auto API docs.
  * **How used:** FastAPI autogenerates docs at `/docs` for testing endpoints (mainly useful in the earlier auth build).

* **SQLModel + SQLite** *(earlier/full API version)*

  * **What:** ORM + DB.
  * **How used:** Models & persistence for users/moods; simple file DB for prototyping. (Your current “no-auth simple” flow may not use it.)

* **Node.js + npm**

  * **What:** Frontend tooling/runtime.
  * **How used:** Runs Vite dev server, installs React deps, builds production assets.

* **StaticFiles (FastAPI)**

  * **What:** Serves static React build.
  * **How used:** In production mode, FastAPI mounts `mood-frontend/dist` at `/`, while `/dayboard` continues serving the API.


Here’s the “what it does” in plain English:

* **React:** Builds the web page, handles input, and shows the results.

* **Vite:** Runs the frontend locally with instant refresh; bundles it for production; forwards `/dayboard` calls to the backend.

* **TypeScript:** Catches mistakes while coding (safer JavaScript).

* **CSS:** Makes it look good; the accent color changes with the mood.

* **Fetch (browser):** Sends `POST /dayboard` with the mood and reads the JSON reply.

* **FastAPI (Python):** The backend that receives the mood and returns the dayboard JSON.

* **Uvicorn:** The server that runs FastAPI.

* **httpx (optional):** Lets the backend call outside APIs (e.g., OpenAI) if enabled.

* **CORS:** Allows the browser app to talk to the backend during development.

* **OpenAPI/Swagger:** Auto-generated API test page at `/docs`.

* **SQLModel + SQLite (older/full version):** Saves data to a simple database.

* **Node.js + npm:** Tools that run and build the React frontend.

* **StaticFiles (FastAPI, prod):** Lets FastAPI serve the built React app.

simplified explanations:
